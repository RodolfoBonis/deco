# Gin Decorators V2 - Cursor Rules

## 🎯 Objetivo
Manter alta qualidade de código, segurança e performance no projeto gin-decorators-v2 seguindo as melhores práticas do Go e padrões estabelecidos.

## 📋 Padrões de Código

### 🔧 Estrutura e Organização
- **Funções pequenas**: Máximo 30 linhas por função
- **Complexidade cognitiva**: Máximo 25 pontos por função
- **Responsabilidade única**: Uma função = uma responsabilidade
- **Nomes descritivos**: Use nomes que expliquem o que a função faz
- **Comentários em inglês**: Todos os comentários devem ser em inglês
- **Documentação em português**: Explicações para usuários em português

### 🏗️ Arquitetura
- **Separação de responsabilidades**: Dividir funções complexas em funções auxiliares
- **Injeção de dependências**: Use interfaces para desacoplamento
- **Configuração centralizada**: Use structs de configuração
- **Error handling**: Sempre trate erros adequadamente
- **Logging estruturado**: Use níveis de log apropriados (Verbose, Normal, Error)

## 🔒 Padrões de Segurança

### 🔐 Criptografia e Hash
- **NUNCA use MD5**: Sempre use SHA-256 ou superior
- **TLS seguro**: Sempre configure MinVersion: tls.VersionTLS12
- **Certificados válidos**: Em produção, nunca use InsecureSkipVerify: true
- **Validação de entrada**: Sempre valide dados de entrada
- **Sanitização**: Sanitize dados antes de usar em queries ou templates

### 🛡️ Conversões de Tipo
- **Overflow de inteiros**: Use comentários nolint:gosec apenas quando seguro
- **Conversões seguras**: Sempre verifique se a conversão é segura
- **Bounds checking**: Verifique limites antes de acessar slices/arrays

### 🌐 Segurança Web
- **CORS configurado**: Configure CORS adequadamente
- **Rate limiting**: Implemente rate limiting em endpoints públicos
- **Input validation**: Valide todos os inputs do usuário
- **SQL injection**: Use prepared statements ou ORM

## 🧠 Padrões de Complexidade

### 📊 Redução de Complexidade Cognitiva
- **Extrair funções auxiliares**: Divida funções complexas em funções menores
- **Switch statements**: Use mapas ou funções para reduzir complexidade
- **Early returns**: Use early returns para reduzir aninhamento
- **Guard clauses**: Use guard clauses no início das funções

### 🔄 Refatoração de Funções Complexas
```go
// ❌ Antes - Função complexa
func processComplexData(data []Data) error {
    // 50+ linhas com múltiplas responsabilidades
}

// ✅ Depois - Funções menores
func processComplexData(data []Data) error {
    if err := validateData(data); err != nil {
        return err
    }
    
    processedData := transformData(data)
    return saveData(processedData)
}

func validateData(data []Data) error { /* ... */ }
func transformData(data []Data) []ProcessedData { /* ... */ }
func saveData(data []ProcessedData) error { /* ... */ }
```

## 🧪 Padrões de Teste

### 📝 Estrutura de Testes
- **Nomes descritivos**: `TestFunctionName_Scenario_ExpectedResult`
- **Arrange-Act-Assert**: Sempre siga o padrão AAA
- **Testes isolados**: Cada teste deve ser independente
- **Mocks apropriados**: Use mocks para dependências externas

### 🎯 Cobertura de Testes
- **Mínimo 80%**: Mantenha cobertura mínima de 80%
- **Testes de erro**: Sempre teste cenários de erro
- **Testes de borda**: Teste casos extremos e edge cases
- **Testes de integração**: Para funcionalidades críticas

### 🔧 Parâmetros Não Utilizados
```go
// ❌ Antes
func TestFunction(t *testing.T) {
    c, _ := gin.CreateTestContext(httptest.NewRecorder())
    // c não é usado
}

// ✅ Depois
func TestFunction(t *testing.T) {
    c, _ := gin.CreateTestContext(httptest.NewRecorder())
    _ = c // Use context to avoid unused variable warning
}
```

## ⚡ Padrões de Performance

### 🚀 Otimizações
- **Alocação de slices**: Use `make()` com tamanho conhecido
- **Passagem por ponteiro**: Para structs grandes, passe por ponteiro
- **Pool de objetos**: Para objetos frequentemente criados/destruídos
- **Goroutines**: Use goroutines para operações I/O

### 📦 Gerenciamento de Memória
- **Evite alocações desnecessárias**: Reutilize buffers quando possível
- **Defer cleanup**: Sempre use defer para limpeza de recursos
- **Context timeouts**: Configure timeouts apropriados

## 📚 Padrões de Documentação

### 📖 Comentários
- **Comentários de função**: Explique o que a função faz, não como
- **Comentários de complexidade**: Explique lógica complexa
- **Exemplos**: Forneça exemplos para funções públicas
- **TODO/FIXME**: Use tags apropriadas para tarefas pendentes

### 🎨 Documentação de API
- **Swagger/OpenAPI**: Mantenha documentação atualizada
- **Exemplos de uso**: Forneça exemplos práticos
- **Descrições claras**: Use linguagem clara e concisa

## 🔧 Padrões de Configuração

### ⚙️ Configuração de Desenvolvimento
- **Arquivos .env**: Use variáveis de ambiente para configurações
- **Configuração por ambiente**: Separe configs de dev/prod
- **Valores padrão**: Sempre forneça valores padrão seguros
- **Validação**: Valide configurações na inicialização

### 🛠️ Ferramentas de Desenvolvimento
- **golangci-lint**: Use configuração rigorosa
- **go fmt**: Sempre formate código
- **go vet**: Execute regularmente
- **pre-commit hooks**: Configure hooks para qualidade

## 🚨 Padrões de Error Handling

### ⚠️ Tratamento de Erros
- **Error wrapping**: Use `fmt.Errorf("context: %w", err)`
- **Error types**: Defina tipos de erro específicos
- **Logging**: Log erros com contexto adequado
- **Recovery**: Implemente recovery para panics

### 🔍 Validação
- **Input validation**: Valide inputs no início das funções
- **Business rules**: Valide regras de negócio
- **Type safety**: Use tipos fortes para evitar erros

## 📊 Métricas de Qualidade

### 🎯 Metas
- **Complexidade cognitiva**: < 25 por função
- **Cobertura de testes**: > 80%
- **Erros de lint**: 0
- **Warnings críticos**: 0
- **Duplicação de código**: < 5%

### 📈 Monitoramento
- **Análise estática**: Execute regularmente
- **Code reviews**: Sempre revise código
- **Refatoração contínua**: Melhore código constantemente
- **Documentação**: Mantenha documentação atualizada

## 🔄 Processo de Desenvolvimento

### 📝 Antes de Commitar
1. **Execute lint**: `make lint`
2. **Execute testes**: `go test ./...`
3. **Verifique cobertura**: `go test -cover`
4. **Formate código**: `go fmt ./...`
5. **Revise mudanças**: `git diff --cached`

### 🚀 Antes de Fazer PR
1. **Todos os testes passando**
2. **Cobertura adequada**
3. **Documentação atualizada**
4. **Exemplos funcionando**
5. **Performance aceitável**

## 🎨 Convenções de Nomenclatura

### 📝 Funções e Variáveis
- **CamelCase**: Para funções e variáveis
- **PascalCase**: Para tipos e funções públicas
- **snake_case**: Para arquivos de configuração
- **kebab-case**: Para URLs e paths

### 🏷️ Tags e Anotações
- **JSON tags**: Use snake_case para JSON
- **YAML tags**: Use snake_case para YAML
- **Struct tags**: Mantenha consistência

## 🔧 Configuração de Ferramentas

### 🛠️ golangci-lint
```yaml
# .golangci.yml
linters:
  enable:
    - gocognit
    - gosec
    - govet
    - errcheck
    - unused
    - gocritic
    - gofmt
    - goimports

linters-settings:
  gocognit:
    min-complexity: 25
  gosec:
    excludes:
      - G404 # Random number generation
```

### 📊 go.mod
- **Versões fixas**: Use versões específicas
- **Módulos mínimos**: Inclua apenas dependências necessárias
- **Atualizações regulares**: Mantenha dependências atualizadas

## 🎯 Checklist de Qualidade

### ✅ Antes de Commitar
- [ ] Código formatado (`go fmt`)
- [ ] Lint passando (`make lint`)
- [ ] Testes passando (`go test`)
- [ ] Cobertura adequada (>80%)
- [ ] Documentação atualizada
- [ ] Exemplos funcionando
- [ ] Performance aceitável

### ✅ Antes de Fazer PR
- [ ] Todos os checks passando
- [ ] Code review aprovado
- [ ] Documentação completa
- [ ] Changelog atualizado
- [ ] Breaking changes documentados
- [ ] Migração guide (se necessário)

## 🚀 Comandos Úteis

```bash
# Qualidade de código
make lint                    # Executar lint
make test                    # Executar testes
make test-coverage          # Testes com cobertura
make format                 # Formatar código
make clean                  # Limpar build

# Desenvolvimento
make dev                    # Servidor de desenvolvimento
make build                  # Build de produção
make install                # Instalar ferramentas
```

## 📚 Referências

- [Effective Go](https://golang.org/doc/effective_go.html)
- [Go Code Review Comments](https://github.com/golang/go/wiki/CodeReviewComments)
- [Go Security Best Practices](https://golang.org/doc/security/best-practices)
- [Go Testing Best Practices](https://golang.org/doc/tutorial/add-a-test)

---

**Lembre-se**: Qualidade de código é um processo contínuo. Sempre busque melhorar e refatorar quando necessário! 🚀 