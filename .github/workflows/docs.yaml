name: Documentation

on:
  push:
    branches:
      - main
    paths:
      - 'pkg/**'
      - 'cmd/**'
      - 'examples/**'
      - 'README.md'
      - 'USAGE.md'
      - 'API_REFERENCE.md'
      - 'EXAMPLES.md'
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
    paths:
      - 'pkg/**'
      - 'cmd/**'
      - 'examples/**'
      - 'README.md'
      - 'USAGE.md'
      - 'API_REFERENCE.md'
      - 'EXAMPLES.md'

permissions:
  contents: write
  checks: read
  pull-requests: write

jobs:
  generate_docs:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          token: ${{ github.token }}
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23

      - name: Build binary for documentation
        run: |
          go build -v -o deco ./cmd/deco

      - name: Create docs directory
        run: mkdir -p docs

      - name: Generate API documentation
        run: |
          # Gera documentação da API usando go doc
          echo "# API Reference" > docs/api.md
          echo "" >> docs/api.md
          echo "## Package: github.com/RodolfoBonis/deco" >> docs/api.md
          echo "" >> docs/api.md
          go doc -all ./pkg/decorators >> docs/api.md

      - name: Generate CLI documentation
        run: |
          echo "# CLI Reference" > docs/cli.md
          echo "" >> docs/cli.md
          echo "## deco Command Line Interface" >> docs/cli.md
          echo "" >> docs/cli.md
          echo "### Usage" >> docs/cli.md
          echo '```bash' >> docs/cli.md
          ./deco --help >> docs/cli.md
          echo '```' >> docs/cli.md
          echo "" >> docs/cli.md
          echo "### Commands" >> docs/cli.md
          echo "" >> docs/cli.md
          echo "#### init" >> docs/cli.md
          echo '```bash' >> docs/cli.md
          ./deco init --help >> docs/cli.md 2>&1 || echo "No help available for init command" >> docs/cli.md
          echo '```' >> docs/cli.md

      - name: Generate examples documentation
        run: |
          echo "# Examples" > docs/examples.md
          echo "" >> docs/examples.md
          echo "## Basic Examples" >> docs/examples.md
          echo "" >> docs/examples.md
          
          # Lista exemplos disponíveis
          if [ -d "examples" ]; then
            echo "### Available Examples:" >> docs/examples.md
            echo "" >> docs/examples.md
            for example in examples/*/; do
              if [ -d "$example" ]; then
                example_name=$(basename "$example")
                echo "- [$example_name](../examples/$example_name/)" >> docs/examples.md
              fi
            done
            echo "" >> docs/examples.md
          fi

      - name: Generate usage documentation
        run: |
          # Copy and adapt content from USAGE.md
          if [ -f "USAGE.md" ]; then
            # Copy the content and adapt it for docs/usage.md
            cp USAGE.md docs/usage.md
            
            # Update the title to match docs format
            sed -i '1s/.*/# deco Framework Usage Guide/' docs/usage.md
            
            # Add a note about the source
            echo "" >> docs/usage.md
            echo "---" >> docs/usage.md
            echo "*This documentation is automatically generated from the main USAGE.md file.*" >> docs/usage.md
          else
            # Fallback if USAGE.md doesn't exist
            echo "# deco Framework Usage Guide" > docs/usage.md
            echo "" >> docs/usage.md
            echo "The **deco** is an annotation-based framework for Gin that simplifies REST API and WebSocket development in Go." >> docs/usage.md
            echo "" >> docs/usage.md
            echo "## 📋 Quick Start" >> docs/usage.md
            echo "" >> docs/usage.md
            echo "1. **Install CLI:** \`go install github.com/RodolfoBonis/deco/cmd/deco@latest\`" >> docs/usage.md
            echo "2. **Initialize project:** \`deco init\`" >> docs/usage.md
            echo "3. **Create handlers** with appropriate decorators" >> docs/usage.md
            echo "4. **Generate code:** \`deco\`" >> docs/usage.md
            echo "5. **Run application:** \`go run main.go\`" >> docs/usage.md
            echo "" >> docs/usage.md
            echo "For complete documentation, see the main [USAGE.md](../USAGE.md) file." >> docs/usage.md
          fi

      - name: Generate installation guide
        run: |
          echo "# Installation Guide" > docs/installation.md
          echo "" >> docs/installation.md
          echo "## Quick Start" >> docs/installation.md
          echo "" >> docs/installation.md
          echo "### Prerequisites" >> docs/installation.md
          echo "- Go 1.22 or later" >> docs/installation.md
          echo "" >> docs/installation.md
          echo "### Install the CLI tool" >> docs/installation.md
          echo '```bash' >> docs/installation.md
          echo 'go install github.com/RodolfoBonis/deco/cmd/deco@latest' >> docs/installation.md
          echo '```' >> docs/installation.md
          echo "" >> docs/installation.md
          echo "### Initialize a new project" >> docs/installation.md
          echo '```bash' >> docs/installation.md
          echo 'deco init' >> docs/installation.md
          echo '```' >> docs/installation.md
          echo "" >> docs/installation.md
          echo "### Generate code" >> docs/installation.md
          echo '```bash' >> docs/installation.md
          echo 'deco' >> docs/installation.md
          echo '```' >> docs/installation.md

      - name: Generate changelog
        run: |
          echo "# Changelog" > docs/changelog.md
          echo "" >> docs/changelog.md
          echo "## Recent Changes" >> docs/changelog.md
          echo "" >> docs/changelog.md
          
          # Pega os últimos 10 commits
          git log --oneline -10 >> docs/changelog.md

      - name: Create documentation index
        run: |
          echo "# deco Framework Documentation" > docs/README.md
          echo "" >> docs/README.md
          echo "Welcome to the deco framework documentation!" >> docs/README.md
          echo "" >> docs/README.md
          echo "## 📚 Documentation Sections" >> docs/README.md
          echo "" >> docs/README.md
          echo "- [Installation Guide](./installation.md) - How to install and set up deco" >> docs/README.md
          echo "- [Usage Guide](./usage.md) - Complete guide to using decorators and features" >> docs/README.md
          echo "- [CLI Reference](./cli.md) - Command line interface documentation" >> docs/README.md
          echo "- [API Reference](./api.md) - Complete API documentation" >> docs/README.md
          echo "- [Examples](./examples.md) - Code examples and tutorials" >> docs/README.md
          echo "- [Changelog](./changelog.md) - Recent changes and updates" >> docs/README.md
          echo "" >> docs/README.md
          echo "## 🚀 Quick Links" >> docs/README.md
          echo "" >> docs/README.md
          echo "- [GitHub Repository](https://github.com/RodolfoBonis/deco)" >> docs/README.md
          echo "- [Go Package](https://pkg.go.dev/github.com/RodolfoBonis/deco)" >> docs/README.md
          echo "- [Issues](https://github.com/RodolfoBonis/deco/issues)" >> docs/README.md

      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: docs/

  validate_docs:
    runs-on: ubuntu-latest
    needs: generate_docs
    steps:
      - name: Download documentation
        uses: actions/download-artifact@v4
        with:
          name: documentation
          path: docs/

      - name: Check documentation files
        run: |
          echo "📋 Generated documentation files:"
          ls -la docs/
          
          echo ""
          echo "📊 Documentation statistics:"
          for file in docs/*.md; do
            if [ -f "$file" ]; then
              lines=$(wc -l < "$file")
              echo "$(basename "$file"): $lines lines"
            fi
          done

      - name: Validate markdown syntax
        run: |
          # Verifica se os arquivos markdown são válidos
          for file in docs/*.md; do
            if [ -f "$file" ]; then
              echo "Validating $file..."
              # Verifica se o arquivo não está vazio
              if [ ! -s "$file" ]; then
                echo "❌ Error: $file is empty"
                exit 1
              fi
            fi
          done
          echo "✅ All markdown files are valid"

  update_main_readme:
    runs-on: ubuntu-latest
    needs: [generate_docs, validate_docs]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}

      - name: Download documentation
        uses: actions/download-artifact@v4
        with:
          name: documentation
          path: docs/

      - name: Update main README with latest version
        run: |
          # Atualiza a versão no README principal se existir
          if grep -q "Version:" README.md; then
            # Extrai a versão atual do go.mod
            VERSION=$(grep "^go " go.mod | cut -d' ' -f2)
            sed -i "s/Version: .*/Version: $VERSION/" README.md
          fi

      - name: Commit documentation updates
        uses: EndBug/add-and-commit@v9
        with:
          author_name: "GitHub Actions"
          author_email: "actions@github.com"
          message: "docs: update documentation"
          add: "docs/ README.md"
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

  notify:
    needs: [generate_docs, validate_docs, update_main_readme]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Send documentation update notification
        if: ${{ needs.generate_docs.result == 'success' && needs.validate_docs.result == 'success' }}
        uses: akeylimepie/telegram-action@main
        with:
          token: ${{ secrets.BOTTOKEN }}
          chat_id: ${{ secrets.CHAT_ID }}
          parse_mode: 'markdown'
          message_thread_id: ${{ secrets.THREAD_ID }}
          text: |
            📚 *Documentation Updated!*
            
            *Repository:* ${{ github.repository }}
            *Triggered by:* ${{ github.actor }}
            *Branch:* ${{ github.ref_name }}
            
            ✅ Documentation generation: Success
            ✅ Documentation validation: Success
            
            📖 *Updated sections:*
            • Usage Guide
            • API Reference
            • CLI Reference
            • Installation Guide
            • Examples
            • Changelog
            
            🔗 [View Documentation](https://github.com/${{ github.repository }}/tree/main/docs)

      - name: Send documentation error notification
        if: ${{ needs.generate_docs.result != 'success' || needs.validate_docs.result != 'success' }}
        uses: akeylimepie/telegram-action@main
        with:
          token: ${{ secrets.BOTTOKEN }}
          chat_id: ${{ secrets.CHAT_ID }}
          parse_mode: 'markdown'
          message_thread_id: ${{ secrets.THREAD_ID }}
          text: |
            ❌ *Documentation Update Failed!*
            
            *Repository:* ${{ github.repository }}
            *Triggered by:* ${{ github.actor }}
            *Branch:* ${{ github.ref_name }}
            
            🔍 *Debug Information:*
            • Generation Status: ${{ needs.generate_docs.result }}
            • Validation Status: ${{ needs.validate_docs.result }}
            
            ⚠️ [Check GitHub Actions Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) 