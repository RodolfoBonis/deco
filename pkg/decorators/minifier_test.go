// Tests for code minification logic in gin-decorators framework
package decorators

import (
	"os"
	"path/filepath"
	"strings"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestMinifyCode_Disabled(t *testing.T) {
	// Create temporary files
	tempDir := t.TempDir()
	inputPath := filepath.Join(tempDir, "input.go")
	outputPath := filepath.Join(tempDir, "output.go")

	// Create test input file
	inputContent := `package main

import "fmt"

// This is a comment
func main() {
    fmt.Println("Hello, World!")
}
`

	err := os.WriteFile(inputPath, []byte(inputContent), 0o644)
	assert.NoError(t, err)

	// Test minification disabled
	err = MinifyCode(inputPath, outputPath, false)
	assert.NoError(t, err)

	// Check that file was copied without changes
	outputContent, err := os.ReadFile(outputPath)
	assert.NoError(t, err)
	assert.Equal(t, inputContent, string(outputContent))
}

func TestMinifyCode_Enabled(t *testing.T) {
	// Create temporary files
	tempDir := t.TempDir()
	inputPath := filepath.Join(tempDir, "input.go")
	outputPath := filepath.Join(tempDir, "output.go")

	// Create test input file with comments and extra spaces
	inputContent := `package main

import (
    "fmt"
    "strings"
)

// This is a comment that should be removed
func main() {
    // Another comment
    fmt.Println("Hello, World!")    // Inline comment
    
    // Multiple empty lines below
    
    
    strings.TrimSpace("  test  ")
}
`

	err := os.WriteFile(inputPath, []byte(inputContent), 0o644)
	assert.NoError(t, err)

	// Test minification enabled
	err = MinifyCode(inputPath, outputPath, true)
	assert.NoError(t, err)

	// Check that file was minified
	outputContent, err := os.ReadFile(outputPath)
	assert.NoError(t, err)

	// Should be different from input
	assert.NotEqual(t, inputContent, string(outputContent))

	// Should still be valid Go code
	assert.Contains(t, string(outputContent), "package main")
	assert.Contains(t, string(outputContent), "func main()")
	assert.Contains(t, string(outputContent), "fmt.Println")

	// Should have fewer lines (comments removed)
	inputLines := len(strings.Split(inputContent, "\n"))
	outputLines := len(strings.Split(string(outputContent), "\n"))
	assert.Less(t, outputLines, inputLines)
}

func TestMinifyCode_WithGeneratedComments(t *testing.T) {
	// Create temporary files
	tempDir := t.TempDir()
	inputPath := filepath.Join(tempDir, "input.go")
	outputPath := filepath.Join(tempDir, "output.go")

	// Create test input file with generated comments
	inputContent := `// Code generated by gin-decorators. DO NOT EDIT.
package main

import "fmt"

// This comment should be removed
func main() {
    fmt.Println("Hello, World!")
}
`

	err := os.WriteFile(inputPath, []byte(inputContent), 0o644)
	assert.NoError(t, err)

	// Test minification enabled
	err = MinifyCode(inputPath, outputPath, true)
	assert.NoError(t, err)

	// Check that file was minified
	outputContent, err := os.ReadFile(outputPath)
	assert.NoError(t, err)

	// Generated comment should be preserved
	assert.Contains(t, string(outputContent), "Code generated")
	assert.Contains(t, string(outputContent), "DO NOT EDIT")

	// Regular comment should be removed
	assert.NotContains(t, string(outputContent), "This comment should be removed")
}

func TestMinifyGoCode(t *testing.T) {
	tests := []struct {
		name     string
		input    string
		expected string
	}{
		{
			name: "simple code",
			input: `package main

func main() {
    fmt.Println("Hello")
}`,
			expected: "package main",
		},
		{
			name: "code with comments",
			input: `package main

// This is a comment
func main() {
    // Another comment
    fmt.Println("Hello")
}`,
			expected: "package main",
		},
		{
			name: "code with generated comments",
			input: `// Code generated by gin-decorators
package main

func main() {
    fmt.Println("Hello")
}`,
			expected: "Code generated",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result, err := minifyGoCode(tt.input)
			assert.NoError(t, err)
			assert.Contains(t, result, tt.expected)
		})
	}
}

func TestMinifyWithAST(t *testing.T) {
	// Test with valid Go code
	code := `package main

import "fmt"

// This is a comment
func main() {
    fmt.Println("Hello, World!")
}
`

	result, err := minifyWithAST(code)
	assert.NoError(t, err)
	assert.Contains(t, result, "package main")
	assert.Contains(t, result, "func main()")

	// Test with invalid Go code
	invalidCode := `package main

func main() {
    invalid syntax here
}
`

	_, err = minifyWithAST(invalidCode)
	assert.Error(t, err)
}

func TestFilterComments(t *testing.T) {
	// Remove  to avoid race conditions

	// Test the minification function that uses filterComments internally
	input := `package main

// Regular comment
// Code generated by gin-decorators
// DO NOT EDIT
// Another regular comment

func main() {
	fmt.Println("Hello")
}
`

	result, err := minifyWithAST(input)
	assert.NoError(t, err)

	// Generated comments should be preserved
	assert.Contains(t, result, "Code generated")
	assert.Contains(t, result, "DO NOT EDIT")

	// Regular comments should be removed (but they might still be there due to AST parsing)
	// The important thing is that the code is valid
	assert.Contains(t, result, "package main")
	assert.Contains(t, result, "func main()")
}

func TestMinifyWithRegex(t *testing.T) {
	tests := []struct {
		name     string
		input    string
		expected string
	}{
		{
			name: "remove regular comments",
			input: `package main

// This comment should be removed
func main() {
    fmt.Println("Hello")
}`,
			expected: "package main",
		},
		{
			name: "preserve generated comments",
			input: `// Code generated by gin-decorators
package main

func main() {
    fmt.Println("Hello")
}`,
			expected: "Code generated",
		},
		{
			name: "remove empty lines",
			input: `package main


func main() {
    fmt.Println("Hello")
}`,
			expected: "package main",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := minifyWithRegex(tt.input)
			assert.Contains(t, result, tt.expected)
		})
	}
}

func TestApplyAdditionalMinification(t *testing.T) {
	tests := []struct {
		name     string
		input    string
		expected string
	}{
		{
			name: "remove multiple newlines",
			input: `package main


func main() {
    fmt.Println("Hello")
}`,
			expected: "package main",
		},
		{
			name: "clean trailing spaces",
			input: `package main
func main() {    
    fmt.Println("Hello")    
}`,
			expected: "package main",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := applyAdditionalMinification(tt.input)
			assert.Contains(t, result, tt.expected)
		})
	}
}

func TestCompactImports(t *testing.T) {
	tests := []struct {
		name     string
		input    string
		expected string
	}{
		{
			name: "compact import block",
			input: `package main

import (
    "fmt"
    
    "strings"
    
    "os"
)

func main() {
    fmt.Println("Hello")
}`,
			expected: "import (",
		},
		{
			name: "no import block",
			input: `package main

import "fmt"

func main() {
    fmt.Println("Hello")
}`,
			expected: "package main",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := compactImports(tt.input)
			assert.Contains(t, result, tt.expected)
		})
	}
}

func TestCopyFile(t *testing.T) {
	// Create temporary files
	tempDir := t.TempDir()
	srcPath := filepath.Join(tempDir, "source.txt")
	dstPath := filepath.Join(tempDir, "destination.txt")

	// Create source file
	content := "This is test content"
	err := os.WriteFile(srcPath, []byte(content), 0o644)
	assert.NoError(t, err)

	// Test copy
	err = copyFile(srcPath, dstPath)
	assert.NoError(t, err)

	// Check destination file
	dstContent, err := os.ReadFile(dstPath)
	assert.NoError(t, err)
	assert.Equal(t, content, string(dstContent))
}

func TestCopyFile_NonExistentSource(t *testing.T) {
	// Create temporary directory
	tempDir := t.TempDir()
	srcPath := filepath.Join(tempDir, "nonexistent.txt")
	dstPath := filepath.Join(tempDir, "destination.txt")

	// Test copy with non-existent source
	err := copyFile(srcPath, dstPath)
	assert.Error(t, err)
}

func TestGetMinifiedTemplate(t *testing.T) {
	template := GetMinifiedTemplate()
	assert.NotEmpty(t, template)

	// Should contain essential template elements
	assert.Contains(t, template, "func init()")
	assert.Contains(t, template, "deco.RegisterRouteWithMeta")

	// Should be minified (no extra spaces, comments, etc.)
	lines := strings.Split(template, "\n")
	for _, line := range lines {
		trimmed := strings.TrimSpace(line)
		if trimmed != "" && !strings.HasPrefix(trimmed, "//") {
			// Code lines should not have trailing spaces
			assert.Equal(t, strings.TrimRight(line, " \t"), line)
		}
	}
}

func TestMinifyCode_ComplexGoFile(t *testing.T) {
	// Create temporary files
	tempDir := t.TempDir()
	inputPath := filepath.Join(tempDir, "input.go")
	outputPath := filepath.Join(tempDir, "output.go")

	// Create complex test input file
	inputContent := `// Code generated by gin-decorators. DO NOT EDIT.
package main

import (
    "fmt"
    "strings"
    "time"
)

// User represents a user in the system
type User struct {
    ID   int    ` + "`json:\"id\"`" + `
    Name string ` + "`json:\"name\"`" + `
}

// GetUser retrieves a user by ID
func GetUser(id int) (*User, error) {
    // This is a regular comment that should be removed
    
    // TODO: Implement database query
    return &User{
        ID:   id,
        Name: "Test User",
    }, nil
}

// CreateUser creates a new user
func CreateUser(name string) (*User, error) {
    // Another comment to remove
    
    
    // Multiple empty lines above
    
    return &User{
        ID:   time.Now().Unix(),
        Name: strings.TrimSpace(name),
    }, nil
}
`

	err := os.WriteFile(inputPath, []byte(inputContent), 0o644)
	assert.NoError(t, err)

	// Test minification enabled
	err = MinifyCode(inputPath, outputPath, true)
	assert.NoError(t, err)

	// Check that file was minified
	outputContent, err := os.ReadFile(outputPath)
	assert.NoError(t, err)

	// Generated comment should be preserved
	assert.Contains(t, string(outputContent), "Code generated")
	assert.Contains(t, string(outputContent), "DO NOT EDIT")

	// Regular comments should be removed
	assert.NotContains(t, string(outputContent), "This is a regular comment")
	assert.NotContains(t, string(outputContent), "Another comment to remove")

	// Code should still be valid
	assert.Contains(t, string(outputContent), "type User struct")
	assert.Contains(t, string(outputContent), "func GetUser")
	assert.Contains(t, string(outputContent), "func CreateUser")

	// Should have fewer lines
	inputLines := len(strings.Split(inputContent, "\n"))
	outputLines := len(strings.Split(string(outputContent), "\n"))
	assert.Less(t, outputLines, inputLines)
}
